-include filHeaderTrailer.bfs;
-include fspHeader.bfs;
-include extentDescriptor.bfs;
//-include record.bfs;

define PAGE_SIZE=16;

## FIL_PAGE_INDEX		17855:  B-tree node

typedef block IndexPageHeader {
    NUMBER_OF_DIRECTORY_SLOTS: 2B;
    HEAP_TOP_POSITION: 2B;
    NUMBER_OF_HEAP_RECORDS: 2B; // format flag
    FIRST_GARBAGE_RECORD_OFFSET: 2B;
    GARBAGE_SPACE: 2B;
    LAST_INSERT_POSITION: 2B;
    PAGE_DIRECTION: 2B;
    NUMBER_OF_INSERTS_IN_PAGE_DIRECTION: 2B;
    NUMBER_OF_RECORDS: 2B;
    MAXIMUM_TRANSACTION_ID: 8B;
    PAGE_LEVEL: 2B;
    INDEX_ID: 8B;
};

typedef block FileSegmentHeader {
    LEAF_PAGE_INODE_SPACE_ID: 4B;
    LEAF_PAGE_INODE_PAGE_NO: 4B;
    LEAF_PAGE_INODE_OFFSET: 2B;

    INTERNAL_PAGE_INODE_SPACE_ID: 4B;
    INTERNAL_PAGE_INODE_PAGE_NO: 4B;
    INTERNAL_PAGE_INODE_OFFSET: 2B;
};

typedef block IndexSystemRecord {
    INFO_FLAGS: 4b;
    NUMBER_OF_RECORDS_OWNED: 4b;
    ORDER: 13b;
    RECORD_TYPE: 3b;
    NEXT_RECORD_OFFSET: 2B;
    INFIMUM: 8B;

    INFO_FLAGS: 4b;
    NUMBER_OF_RECORDS_OWNED: 4b;
    ORDER: 13b;
    RECORD_TYPE: 3b;
    NEXT_RECORD_OFFSET: 2B;
    SUPREMUM: 8B;
};

typedef block IndexPageDirectory {
    SLOT: 2B
};

// FIXME(zhoujiagen): handle field dependencies
typedef block IndexPage {
    block FILHeader;
    block IndexPageHeader;
    block FileSegmentHeader;
    block IndexSystemRecord;
    // User Records
    // Free Space
    FREE_SPACE: ...;
    block IndexPageDirectory: $[IndexPageHeader.NUMBER_OF_DIRECTORY_SLOTS];
    block FILTrailer;
}: ${PAGE_SIZE} KB;


## FIL_PAGE_RTREE		17854:  B-tree node
## FIL_PAGE_UNDO_LOG	2:  Undo log page

## FIL_PAGE_INODE		3:  Index node

typedef block InodeEntry {
    FSEG_ID: 8B;
    USED_PAGE_IN_NOT_FULL: 4B;
    LIST_BASE_NODE_FOR_FREE: 16B;
    LIST_BASE_NODE_FOR_NOT_FULL: 16B;
    LIST_BASE_NODE_FOR_FULL: 16B;
    MAGIC_NUMBER: 4B;   // 97937874
    block FragmentArrayEntry {
        ENTRY: 4B;
    } 32;
};

typedef block InodePage {
    block FILHeader;
    LIST_NODE_FOR_INODE_PAGE_LIST: 12B;
    block InodeEntry 85;
    EMPTY_SPACE: 6B;
    block FILTrailer;
}: ${PAGE_SIZE} KB;

## FIL_PAGE_IBUF_FREE_LIST	4:  Insert buffer free list

## FIL_PAGE_TYPE_ALLOCATED	0:  Freshly allocated page

typedef block AllocatedPage {
    block FILHeader;
    UNKNOWN: ...;
    block FILTrailer;
}: ${PAGE_SIZE} KB;

## FIL_PAGE_IBUF_BITMAP	5:  Insert buffer bitmap

typedef block InsertBufferBitmapPageEntry {
    FREE_SPACE: 2b;
    BUFFERED_FLAG: 1b;
    CHANGE_BUFFER_FLAG: 1b;
};

typedef block InsertBufferBitmapPage {
    block FILHeader;
    // CHANGE_BUFFER_BITMAP: 8192B; // 4 bits per page: pages 0-16384
    block InsertBufferBitmapPageEntry 2048;
    EMPTY_SPACE: 8146B;
    block FILTrailer;
}: ${PAGE_SIZE} KB;

## FIL_PAGE_TYPE_SYS	6:  System page
## FIL_PAGE_TYPE_TRX_SYS	7:  Transaction system data

//typedef block TransactionSystemPage {
//
//};

## FIL_PAGE_TYPE_FSP_HDR	8:  File space header

typedef block FspHeaderPage {
    block FILHeader;
    block FSPHeader;
    block XDESEntry 256;
    EMPTY_SPACE: 5986B;
    block FILTrailer;
}: ${PAGE_SIZE} KB;

## FIL_PAGE_TYPE_XDES	9:  Extent descriptor page
## FIL_PAGE_TYPE_BLOB	10:  Uncompressed BLOB page
## FIL_PAGE_TYPE_ZBLOB	11:  First compressed BLOB page
## FIL_PAGE_TYPE_ZBLOB2	12:  Subsequent compressed BLOB page
## FIL_PAGE_TYPE_UNKNOWN	13:  In old tablespaces, garbage in FIL_PAGE_TYPE is replaced with this value when flushing pages.
## FIL_PAGE_COMPRESSED	14:  Compressed page
## FIL_PAGE_ENCRYPTED	15:  Encrypted page
## FIL_PAGE_COMPRESSED_AND_ENCRYPTED 16:  Compressed and Encrypted page
## FIL_PAGE_ENCRYPTED_RTREE 17:  Encrypted R-tree page